{"version":3,"sources":["C:/SnapChingWebSite/SnapchingClient/node_modules/ngx-page-scroll/fesm5/ngx-page-scroll.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6JM,AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA0DD;;;;;;;;;;;;;;;;;;;gDAaC","file":"ngx-page-scroll.js","sourcesContent":["import { EventEmitter, Directive, Optional, Inject, Input, Output, NgModule } from '@angular/core';\nimport { PageScrollService, NgxPageScrollCoreModule } from 'ngx-page-scroll-core';\nimport { NavigationEnd, NavigationError, NavigationCancel, Router } from '@angular/router';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxPageScrollDirective = /** @class */ (function () {\n    function NgxPageScrollDirective(pageScrollService, router, document) {\n        this.pageScrollService = pageScrollService;\n        this.router = router;\n        this.pageScrollAdjustHash = false;\n        this.pageScrollFinish = new EventEmitter();\n        this.document = (/** @type {?} */ (document));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgxPageScrollDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // Some inputs changed, reset the pageScrollInstance\n        this.pageScrollInstance = undefined;\n    };\n    /**\n     * @return {?}\n     */\n    NgxPageScrollDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.pageScrollInstance) {\n            this.pageScrollService.stop(this.pageScrollInstance);\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxPageScrollDirective.prototype.generatePageScrollInstance = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this.pageScrollInstance === undefined || this.pageScrollInstance === null) {\n            /** @type {?} */\n            var options = {\n                document: this.document,\n                scrollTarget: this.pageScrollTarget || this.href,\n            };\n            if (this.pageScroll) {\n                options.namespace = this.pageScroll;\n            }\n            if (this.pageScrollHorizontal !== undefined && this.pageScrollHorizontal !== null) {\n                options.verticalScrolling = !this.pageScrollHorizontal;\n            }\n            if (this.pageScrollOffset !== undefined && this.pageScrollOffset !== null) {\n                options.scrollOffset = this.pageScrollOffset;\n            }\n            if (this.pageScrollInterruptible !== undefined && this.pageScrollInterruptible !== null) {\n                options.interruptible = this.pageScrollInterruptible;\n            }\n            if (this.pageScrollInView !== undefined && this.pageScrollInView !== null) {\n                options.scrollInView = this.pageScrollInView;\n            }\n            if (this.pageScrollEasing) {\n                options.easingLogic = this.pageScrollEasing;\n            }\n            if (this.pageScrollDuration !== undefined && this.pageScrollDuration !== null) {\n                options.duration = this.pageScrollDuration;\n            }\n            if (this.pageScrollSpeed !== undefined && this.pageScrollSpeed !== null) {\n                options.speed = this.pageScrollSpeed;\n            }\n            if (this.pageScrollFinish) {\n                options.scrollFinishListener = this.pageScrollFinish;\n            }\n            this.pageScrollInstance = this.pageScrollService.create(options);\n        }\n        return this.pageScrollInstance;\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxPageScrollDirective.prototype.pushRouterState = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.pageScrollOptions.scrollTarget === 'string'\n            && ((/** @type {?} */ (this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(0, 1) === '#') {\n            // \"Navigate\" to the current route again and this time set the fragment/hash\n            this.router.navigate([], {\n                fragment: ((/** @type {?} */ (this.pageScrollInstance.pageScrollOptions.scrollTarget))).substr(1),\n                preserveQueryParams: true,\n            });\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    NgxPageScrollDirective.prototype.scroll = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var pageScrollInstance = this.generatePageScrollInstance();\n        this.pushRouterState();\n        this.pageScrollService.start(pageScrollInstance);\n    };\n    /**\n     * @param {?} clickEvent\n     * @return {?}\n     */\n    NgxPageScrollDirective.prototype.handleClick = /**\n     * @param {?} clickEvent\n     * @return {?}\n     */\n    function (clickEvent) {\n        var _this = this;\n        if (this.routerLink && this.router !== null && this.router !== undefined) {\n            /** @type {?} */\n            var urlTree = void 0;\n            if (typeof this.routerLink === 'string') {\n                urlTree = this.router.parseUrl(this.routerLink);\n            }\n            else {\n                urlTree = this.router.createUrlTree(this.routerLink);\n            }\n            if (!this.router.isActive(urlTree, true)) {\n                // We need to navigate their first.\n                // Navigation is handled by the routerLink directive\n                // so we only need to listen for route change\n                /** @type {?} */\n                var subscription_1 = (/** @type {?} */ (this.router.events.subscribe((/**\n                 * @param {?} routerEvent\n                 * @return {?}\n                 */\n                function (routerEvent) {\n                    if (routerEvent instanceof NavigationEnd) {\n                        subscription_1.unsubscribe();\n                        // use a timeout to start scrolling as soon as the stack is cleared\n                        setTimeout((/**\n                         * @return {?}\n                         */\n                        function () {\n                            _this.scroll();\n                        }), 0);\n                    }\n                    else if (routerEvent instanceof NavigationError || routerEvent instanceof NavigationCancel) {\n                        subscription_1.unsubscribe();\n                    }\n                }))));\n                return false; // to preventDefault()\n            }\n        }\n        this.scroll();\n        return false; // to preventDefault()\n    };\n    NgxPageScrollDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[pageScroll]',\n                    host: {\n                        '(click)': 'handleClick($event)',\n                    },\n                },] }\n    ];\n    /** @nocollapse */\n    NgxPageScrollDirective.ctorParameters = function () { return [\n        { type: PageScrollService },\n        { type: Router, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    NgxPageScrollDirective.propDecorators = {\n        routerLink: [{ type: Input }],\n        href: [{ type: Input }],\n        pageScrollTarget: [{ type: Input }],\n        pageScrollHorizontal: [{ type: Input }],\n        pageScrollOffset: [{ type: Input }],\n        pageScrollDuration: [{ type: Input }],\n        pageScrollSpeed: [{ type: Input }],\n        pageScrollEasing: [{ type: Input }],\n        pageScrollInterruptible: [{ type: Input }],\n        pageScrollInView: [{ type: Input }],\n        pageScrollAdjustHash: [{ type: Input }],\n        pageScroll: [{ type: Input }],\n        pageScrollFinish: [{ type: Output }]\n    };\n    return NgxPageScrollDirective;\n}());\nif (false) {\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.routerLink;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.href;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollTarget;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollHorizontal;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollOffset;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollDuration;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollSpeed;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollEasing;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollInterruptible;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollInView;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollAdjustHash;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScroll;\n    /** @type {?} */\n    NgxPageScrollDirective.prototype.pageScrollFinish;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxPageScrollDirective.prototype.pageScrollInstance;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxPageScrollDirective.prototype.document;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxPageScrollDirective.prototype.pageScrollService;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxPageScrollDirective.prototype.router;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxPageScrollModule = /** @class */ (function () {\n    function NgxPageScrollModule() {\n    }\n    NgxPageScrollModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        NgxPageScrollDirective,\n                    ],\n                    imports: [\n                        NgxPageScrollCoreModule,\n                    ],\n                    exports: [\n                        NgxPageScrollDirective,\n                    ],\n                },] }\n    ];\n    return NgxPageScrollModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxPageScrollDirective, NgxPageScrollModule };\n"]}